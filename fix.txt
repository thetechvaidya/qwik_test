I have created the following plan after thorough exploration and analysis of the codebase. Follow the below plan verbatim. Trust the files and references. Do not re-verify what's written in the plan. Explore only when absolutely necessary. First implement all the proposed file changes and then I'll review all the changes together at the end.

### Observations

The UI and theme system is well-structured with comprehensive Material 3 support, but has several compilation errors:

1. **Missing AppColors properties**: Code references `AppColors.outline`, `AppColors.onSurfaceVariant`, `AppColors.primaryContainer`, `AppColors.warningContainer` that don't exist in the current AppColors class

2. **Deprecated withOpacity() usage**: Many files use `color.withOpacity(0.x)` which should be replaced with `color.withAlpha((255 * 0.x).round())` for better performance

3. **Missing utility classes**: References to `DurationFormatter`, `DateFormatter` classes that may not exist

4. **Navigation system is complete**: NavigationItem, AppNavigationBar, and related classes are well-implemented with proper Material 3 support

5. **Theme structure is solid**: AppTextStyles, AppDimensions, and AppTheme are comprehensive and follow Material 3 guidelines

The core architecture is excellent, just needs the missing properties and deprecated usage fixes.

### Approach

I'll fix the UI and theme-related compilation errors by addressing the core issues systematically:

1. **Add missing color properties** to `AppColors` class - Add `outline`, `primaryContainer`, `onSurface`, `warningContainer`, etc. that are referenced throughout the codebase
2. **Update deprecated `withOpacity()` usage** - Replace with `withAlpha()` for better performance and modern Flutter practices
3. **Fix navigation widget parameter issues** - Ensure all navigation widgets have proper parameter handling and missing imports
4. **Fix custom widget constructor issues** - Address any const constructor problems and missing parameters
5. **Add missing utility classes** - Create missing formatter classes and ensure all imports are available

The approach focuses on making the existing well-structured theme system complete and fixing the specific compilation errors without over-engineering.

### Reasoning

I analyzed the UI and theme-related files and found that the core theme structure is well-designed with Material 3 support. The main issues are: (1) missing color properties in AppColors that are referenced throughout the codebase, (2) deprecated withOpacity() usage that should be replaced with withAlpha(), (3) some missing utility classes like formatters, and (4) potential navigation widget parameter issues. The AppTextStyles, AppDimensions, and core widget structure are comprehensive and well-implemented.

## Mermaid Diagram

sequenceDiagram
    participant UI as UI Components
    participant Colors as AppColors
    participant Utils as Utility Classes
    participant Widgets as Custom Widgets
    participant Theme as Theme System
    
    Note over UI,Theme: UI & Theme Compilation Fixes
    
    UI->>Colors: Request missing color properties
    Colors->>Colors: Add outline, primaryContainer, onSurface, etc.
    Colors-->>UI: All color properties available
    
    UI->>Utils: Request DurationFormatter, DateFormatter
    Utils->>Utils: Create missing utility classes
    Utils-->>UI: Formatters available
    
    UI->>Widgets: Request CachedNetworkImageWidget
    Widgets->>Widgets: Create missing widget
    Widgets-->>UI: Widget available
    
    UI->>UI: Replace withOpacity() with withAlpha()
    Note over UI: Modern Flutter practices
    
    Theme->>Theme: Verify Material 3 compliance
    Note over Theme: WidgetStateProperty usage correct
    
    Note over UI,Theme: All compilation errors resolved

## Proposed File Changes

### mobile-app\lib\core\theme\app_colors.dart(MODIFY)

Add the missing color properties that are referenced throughout the codebase:

1. **Add missing Material 3 color properties** after line 53 (after onErrorContainer):
```dart
// Additional Material 3 colors referenced in the codebase
static const Color outline = neutral300;
static const Color onSurface = neutral900;
static const Color primaryContainer = Color(0xFFDBEAFE);
static const Color onPrimaryContainer = Color(0xFF1E3A8A);
static const Color warningContainer = Color(0xFFFEF3C7);
static const Color onWarningContainer = Color(0xFF92400E);
static const Color successContainer = Color(0xFFD1FAE5);
static const Color onSuccessContainer = Color(0xFF064E3B);
```

2. **Add semantic color aliases** that are commonly used:
```dart
// Semantic color aliases for consistency
static const Color textPrimary = neutral900;
static const Color textSecondary = neutral600;
static const Color divider = neutral200;
static const Color disabled = neutral400;
static const Color shadow = Color(0x1A000000);
```

These additions provide all the color properties that are currently being referenced in the UI components, ensuring compilation success while maintaining the existing Material 3 color scheme structure.

### mobile-app\lib\core\utils\duration_formatter.dart(MODIFY)

Create the missing utility classes that are referenced in the UI components:

1. **Create DurationFormatter class**:
```dart
class DurationFormatter {
  static String format(Duration duration) {
    final hours = duration.inHours;
    final minutes = duration.inMinutes.remainder(60);
    final seconds = duration.inSeconds.remainder(60);
    
    if (hours > 0) {
      return '${hours}h ${minutes}m';
    } else if (minutes > 0) {
      return '${minutes}m ${seconds}s';
    } else {
      return '${seconds}s';
    }
  }
  
  static String formatDetailed(Duration duration) {
    final hours = duration.inHours;
    final minutes = duration.inMinutes.remainder(60);
    final seconds = duration.inSeconds.remainder(60);
    
    if (hours > 0) {
      return '${hours.toString().padLeft(2, '0')}:${minutes.toString().padLeft(2, '0')}:${seconds.toString().padLeft(2, '0')}';
    } else {
      return '${minutes.toString().padLeft(2, '0')}:${seconds.toString().padLeft(2, '0')}';
    }
  }
}
```

This utility class provides the formatting functionality that's referenced in the exam and UI components.

### mobile-app\lib\core\utils\date_formatter.dart(MODIFY)

Create the DateFormatter utility class:

```dart
import 'package:intl/intl.dart';

class DateFormatter {
  static String format(DateTime date, {String pattern = 'MMM dd, yyyy'}) {
    return DateFormat(pattern).format(date);
  }
  
  static String formatRelative(DateTime date) {
    final now = DateTime.now();
    final difference = now.difference(date);
    
    if (difference.inDays > 7) {
      return DateFormat('MMM dd, yyyy').format(date);
    } else if (difference.inDays > 0) {
      return '${difference.inDays} day${difference.inDays == 1 ? '' : 's'} ago';
    } else if (difference.inHours > 0) {
      return '${difference.inHours} hour${difference.inHours == 1 ? '' : 's'} ago';
    } else if (difference.inMinutes > 0) {
      return '${difference.inMinutes} minute${difference.inMinutes == 1 ? '' : 's'} ago';
    } else {
      return 'Just now';
    }
  }
  
  static String formatTime(DateTime date) {
    return DateFormat('HH:mm').format(date);
  }
  
  static String formatDateTime(DateTime date) {
    return DateFormat('MMM dd, yyyy HH:mm').format(date);
  }
}
```

### mobile-app\lib\features\profile\presentation\widgets\profile_header.dart(MODIFY)

Replace all deprecated `withOpacity()` usage with `withAlpha()` for better performance and modern Flutter practices:

1. **Line 33**: Change `backgroundColor: theme.colorScheme.primary.withOpacity(0.1),` to `backgroundColor: theme.colorScheme.primary.withAlpha((255 * 0.1).round()),`

2. **Line 51**: Change `color: Colors.black.withOpacity(0.3),` to `color: Colors.black.withAlpha((255 * 0.3).round()),`

3. **Line 108**: Change `color: theme.colorScheme.outline.withOpacity(0.2),` to `color: theme.colorScheme.outline.withAlpha((255 * 0.2).round()),`

4. **Line 117**: Change `color: color.withOpacity(0.1),` to `color: color.withAlpha((255 * 0.1).round()),`

5. **Line 153**: Change `backgroundColor: theme.colorScheme.primary.withOpacity(0.1),` to `backgroundColor: theme.colorScheme.primary.withAlpha((255 * 0.1).round()),`

6. **Line 164**: Change `color: theme.colorScheme.onSurface.withOpacity(0.6),` to `color: theme.colorScheme.onSurface.withAlpha((255 * 0.6).round()),`

This modernizes the code to use the more performant `withAlpha()` method instead of the deprecated `withOpacity()` method.

### mobile-app\lib\features\settings\presentation\pages\settings_page.dart(MODIFY)

Replace deprecated `withOpacity()` usage with `withAlpha()` throughout the file:

1. **Line 91**: Change `color: Colors.red.withAlpha((255 * 0.6).round()),` (this one is already correct)

2. **Update any other withOpacity usage** if found in the settings page

3. **Fix the property access issue** on line 161 and 229: Ensure the language property is accessed correctly as `state.settings.preferences.language`

4. **Add null safety checks** for the settings state to prevent runtime errors:
```dart
subtitle: state.settings?.preferences?.language ?? 'English',
```

This ensures the settings page compiles correctly and uses modern Flutter practices.

### mobile-app\lib\features\exam_session\presentation\widgets(MODIFY)

Replace all deprecated `withOpacity()` usage with `withAlpha()` throughout the exam session widgets:

1. **In exam_timer_widget.dart**: Line 79 - Change `backgroundColor: _getTextColor().withOpacity(0.2),` to `backgroundColor: _getTextColor().withAlpha((255 * 0.2).round()),`
2. **In navigation_controls_widget.dart**: Line 37 - Change `color: Colors.black.withOpacity(0.1),` to `color: Colors.black.withAlpha((255 * 0.1).round()),` and line 139 - Change `color: onPressed != null ? color : AppColors.onSurface.withOpacity(0.38),` to `color: onPressed != null ? color : AppColors.onSurface.withAlpha((255 * 0.38).round()),`
3. **In question_palette_widget.dart**: Line 31 - Change `color: Colors.black.withOpacity(0.1),` to `color: Colors.black.withAlpha((255 * 0.1).round()),`
4. **In exam_header_widget.dart**: Line 30 - Change `color: Colors.black.withOpacity(0.1),` to `color: Colors.black.withAlpha((255 * 0.1).round()),`

This modernizes all the exam session widgets to use the more performant `withAlpha()` method.

### mobile-app\lib\features\exams\presentation\widgets(MODIFY)

Replace all deprecated `withOpacity()` usage with `withAlpha()` throughout the exam widgets:

1. **In exam_filter_bar.dart**: Line 37 - Change `color: AppColors.outline.withOpacity(0.2),` to `color: AppColors.outline.withAlpha((255 * 0.2).round()),` and line 170 - Change `color: isSelected ? AppColors.primary.withOpacity(0.1) : Colors.transparent,` to `color: isSelected ? AppColors.primary.withAlpha((255 * 0.1).round()) : Colors.transparent,`

2. **In exam_sort_bottom_sheet.dart**: Line 182 - Change `? AppColors.primary.withOpacity(0.1)` to `? AppColors.primary.withAlpha((255 * 0.1).round())`

3. **In exam_grid_item.dart**: Line 65 - Change `color: _getDifficultyColor().withOpacity(0.1),` to `color: _getDifficultyColor().withAlpha((255 * 0.1).round()),` and line 157 - Change `color: _getDifficultyColor().withOpacity(0.1),` to `color: _getDifficultyColor().withAlpha((255 * 0.1).round()),`

4. **In exam_loading_widget.dart**: Lines 124 and 132 - Change `color: AppColors.surface.withOpacity(0.3),` to `color: AppColors.surface.withAlpha((255 * 0.3).round()),`

5. **In exam_detail_page.dart**: Line 91 - Change `AppColors.primary.withOpacity(0.8),` to `AppColors.primary.withAlpha((255 * 0.8).round()),` and line 134 - Change `color: Colors.white.withOpacity(0.9),` to `color: Colors.white.withAlpha((255 * 0.9).round()),`

6. **In exam_empty_state.dart**: Line 124 - Change `color: _getIconBackgroundColor().withOpacity(0.1),` to `color: _getIconBackgroundColor().withAlpha((255 * 0.1).round()),`

7. **In exam_card.dart**: Line 76 - Change `color: _getDifficultyColor().withOpacity(0.1),` to `color: _getDifficultyColor().withAlpha((255 * 0.1).round()),`

This modernizes all the exam widgets to use the more performant `withAlpha()` method.

### mobile-app\lib\core\widgets\cached_network_image_widget.dart(MODIFY)

Create the missing CachedNetworkImageWidget that's referenced in the question content widget:

```dart
import 'package:flutter/material.dart';
import 'package:cached_network_image/cached_network_image.dart';

/// A widget for displaying cached network images with loading and error states
class CachedNetworkImageWidget extends StatelessWidget {
  const CachedNetworkImageWidget({
    super.key,
    required this.imageUrl,
    this.width,
    this.height,
    this.fit = BoxFit.cover,
    this.placeholder,
    this.errorWidget,
    this.borderRadius,
  });

  final String imageUrl;
  final double? width;
  final double? height;
  final BoxFit fit;
  final Widget? placeholder;
  final Widget? errorWidget;
  final BorderRadius? borderRadius;

  @override
  Widget build(BuildContext context) {
    Widget image = CachedNetworkImage(
      imageUrl: imageUrl,
      width: width,
      height: height,
      fit: fit,
      placeholder: (context, url) => placeholder ?? _buildDefaultPlaceholder(),
      errorWidget: (context, url, error) => errorWidget ?? _buildDefaultErrorWidget(),
    );

    if (borderRadius != null) {
      image = ClipRRect(
        borderRadius: borderRadius!,
        child: image,
      );
    }

    return image;
  }

  Widget _buildDefaultPlaceholder() {
    return Container(
      width: width,
      height: height,
      color: Colors.grey[300],
      child: const Center(
        child: CircularProgressIndicator(),
      ),
    );
  }

  Widget _buildDefaultErrorWidget() {
    return Container(
      width: width,
      height: height,
      color: Colors.grey[200],
      child: const Center(
        child: Icon(
          Icons.broken_image,
          color: Colors.grey,
          size: 48,
        ),
      ),
    );
  }
}
```

### mobile-app\lib\core\widgets\loading_widget.dart(MODIFY)

Replace deprecated `withOpacity()` usage with `withAlpha()` in the loading widget:

**Line 122**: Change `color: color ?? Colors.grey[300]?.withOpacity(0.3),` to `color: color ?? Colors.grey[300]?.withAlpha((255 * 0.3).round()),`

This modernizes the loading widget to use the more performant `withAlpha()` method instead of the deprecated `withOpacity()` method.

### mobile-app\lib\shared\widgets\custom_button.dart(MODIFY)

Fix the CustomButton widget to address any remaining compilation issues:

1. **Fix line 221**: Change `foregroundColor = colorScheme.onSecondary;` to `foregroundColor = colorScheme.primary;` (this should be primary color for text buttons, not onSecondary)

2. **Ensure all withAlpha usage is correct**: The CustomButton already uses `withAlpha()` correctly, so no changes needed for opacity methods

3. **Add missing import if needed**: Ensure all required imports are present for Material 3 widgets

4. **Verify WidgetStateProperty usage**: The widget correctly uses `WidgetStateProperty` instead of the deprecated `MaterialStateProperty`

This ensures the CustomButton widget compiles correctly and follows Material 3 guidelines.