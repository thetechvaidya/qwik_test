I have created the following plan after thorough exploration and analysis of the codebase. Follow the below plan verbatim. Trust the files and references. Do not re-verify what's written in the plan. Explore only when absolutely necessary. First implement all the proposed file changes and then I'll review all the changes together at the end.

### Observations

The exams module has a fundamental **entity structure mismatch** causing most compilation errors:

1. **ExamModel vs Exam entity divergence**: ExamModel has fields like `imageUrl`, `totalQuestions`, `passingScore` while Exam entity has `questionCount`, `categoryName`, etc.

2. **Missing UI properties**: Widgets access `requirements`, `topics`, `correctAnswers`, `incorrectAnswers` that don't exist in current entities.

3. **Enum extension gaps**: UI calls `examType.displayName` but ExamType enum lacks this extension.

4. **Search integration**: ExamBloc uses SearchExamsUseCase correctly, but entity inconsistencies cause conflicts.

The solution requires redesigning the entity layer to match both the data model and UI expectations.

### Approach

I'll fix the exams module compilation errors by **aligning the entity structure** with what the UI expects and what the ExamModel provides. The core strategy is to:

1. **Redesign the Exam entity** to include all properties used by UI widgets and available from ExamModel
2. **Update ExamUserProgress entity** to include missing progress tracking properties
3. **Add missing enum extensions** for display names and icons
4. **Fix ExamModel conversion methods** to properly map between model and entity
5. **Remove search functionality conflicts** by using proper repository interfaces

This approach maintains clean architecture while ensuring all UI components have access to the data they need. I'll avoid over-engineering by keeping the entity structure simple and focused on actual usage patterns.

### Reasoning

I analyzed the exams module files and found that the main compilation errors stem from a fundamental mismatch between the ExamModel (which has comprehensive fields like imageUrl, totalQuestions, passingScore) and the current Exam entity (which has a minimal structure with different field names). The UI widgets are trying to access properties that don't exist in the current entity structure. I also found that ExamUserProgress is missing several properties that the UI expects, and some enum extensions are missing. The search functionality integration is architecturally sound but requires consistent entity structures.

## Mermaid Diagram

sequenceDiagram
    participant UI as Exam Detail Page
    participant Bloc as Exam Bloc
    participant Entity as Exam Entity
    participant Model as Exam Model
    participant API as Remote Data Source
    
    Note over UI,API: Exam Module Compilation Fixes
    
    UI->>Bloc: LoadExamDetailEvent
    Bloc->>API: Fetch exam data
    API->>Model: Return ExamModel with all fields
    Note over Model: imageUrl, totalQuestions, passingScore, etc.
    
    Model->>Entity: Convert to updated Exam entity
    Note over Entity: Add missing properties: requirements, topics, userProgress
    
    Entity->>Entity: Apply enum extensions
    Note over Entity: examType.displayName, difficulty.color
    
    Entity->>Bloc: Return comprehensive Exam entity
    Bloc->>UI: ExamDetailLoaded state
    
    UI->>UI: Access all required properties
    Note over UI: exam.totalQuestions, exam.requirements, exam.userProgress.correctAnswers
    
    Note over UI,API: All compilation errors resolved

## Proposed File Changes

### mobile-app\lib\features\exams\domain\entities\exam.dart(MODIFY)

References: 

- mobile-app\lib\features\exams\data\models\exam_model.dart(MODIFY)
- mobile-app\lib\features\exams\presentation\pages\exam_detail_page.dart(MODIFY)

Completely redesign the Exam entity to include all properties used by UI widgets and available from ExamModel:

1. **Replace the current minimal structure** with a comprehensive entity that includes:
   - Basic info: `id`, `title`, `description`, `imageUrl`
   - Exam details: `duration` (as Duration?), `totalQuestions` (rename from questionCount), `totalMarks`, `passingScore`
   - Classification: `difficulty` (as ExamDifficulty enum), `examType` (as ExamType enum), `categoryId`, `categoryName`, `subcategory`
   - Metadata: `tags` (List<String>), `requirements` (List<String>), `topics` (List<String>)
   - Timestamps: `createdAt`, `updatedAt`, `scheduledAt`, `expiresAt`
   - Status: `isActive`, `isPaid`, `price`, `currency`, `status` (as ExamStatus enum), `isFavorite`
   - Nested objects: `stats` (ExamStats), `userProgress` (ExamUserProgress?)

2. **Add copyWith method** to support state updates (favorite toggle, progress updates)

3. **Add computed properties** like `formattedDuration`, `difficultyColor`, `statusColor` for UI convenience

4. **Update ExamStats entity** to match what ExamModel provides: `totalAttempts`, `averageScore`, `highestScore`, `lowestScore`, `passCount`, `failCount`, `passRate`, `averageCompletionTime`

This creates a single source of truth that satisfies both the data layer and UI requirements.
Add missing enum extensions and status enums:

1. **Add ExamStatus enum** with values: `draft`, `published`, `archived`, `suspended`

2. **Update ExamType enum** to include `live` value (currently missing) and add extension:
   ```
   extension ExamTypeExtension on ExamType {
     String get displayName { /* return user-friendly names */ }
     IconData get icon { /* return appropriate icons */ }
   }
   ```

3. **Update ExamDifficulty enum** to use string values that match the API: `beginner`, `intermediate`, `advanced`, `expert`

4. **Add ExamDifficultyExtension** with color helpers:
   ```
   extension ExamDifficultyExtension on ExamDifficulty {
     Color get color { /* return difficulty-specific colors */ }
     String get description { /* return difficulty descriptions */ }
   }
   ```

These extensions provide the display helpers that UI widgets are trying to access.
Update the ExamUserProgress entity to include all properties that UI widgets expect:

1. **Add missing progress tracking properties**:
   - `answeredQuestions` (int) - number of questions answered
   - `correctAnswers` (int) - number of correct answers
   - `incorrectAnswers` (int) - number of incorrect answers
   - `timeSpent` (Duration) - time spent on exam
   - `score` (double?) - current score if available

2. **Keep existing properties**: `userId`, `examId`, `completionPercentage`, `lastAttemptAt`, `isStarted`, `isCompleted`

3. **Add computed properties**:
   - `accuracy` getter: `correctAnswers / answeredQuestions * 100`
   - `remainingQuestions` method that takes total questions as parameter
   - `formattedTimeSpent` getter for UI display

4. **Add copyWith method** for easy state updates during exam taking

This ensures all progress-related properties that the exam detail page tries to access are available.

### mobile-app\lib\features\exams\data\models\exam_model.dart(MODIFY)

References: 

- mobile-app\lib\features\exams\domain\entities\exam.dart(MODIFY)

Fix the ExamModel conversion methods to properly map between the updated entity structure:

1. **Update `toEntity()` method** to map all ExamModel fields to the new Exam entity structure:
   - Map `totalQuestions` to `totalQuestions` (keep same name)
   - Convert `duration` (int minutes) to `Duration(minutes: duration)`
   - Map `category` to `categoryName` and add `categoryId` if available
   - Map string enums to proper enum values using existing helper methods
   - Handle nested `stats` conversion properly
   - Set default values for missing fields like `requirements`, `topics` (empty lists)
   - Map `isFavorite` from user preferences if available

2. **Update `fromEntity()` method** to reverse the mapping:
   - Convert `Duration` back to int minutes
   - Convert enums back to string values
   - Handle all new entity fields appropriately

3. **Add null safety and fallbacks** for fields that might not be available from the API

4. **Update ExamStatsModel conversion** to match the updated ExamStats entity structure

This ensures seamless conversion between the data layer and domain layer.

### mobile-app\lib\features\exams\presentation\pages\exam_detail_page.dart(MODIFY)

References: 

- mobile-app\lib\features\exams\domain\entities\exam.dart(MODIFY)

Update the exam detail page to use the correct entity properties and handle missing data gracefully:

1. **Fix property access** to match the updated Exam entity:
   - Use `exam.totalQuestions` instead of `exam.questionCount`
   - Access `exam.userProgress?.correctAnswers` etc. with null safety
   - Use `exam.requirements` and `exam.topics` directly
   - Access `exam.examType.displayName` using the new extension

2. **Add null safety checks** for optional properties:
   - Check if `exam.userProgress` exists before accessing its properties
   - Handle missing `requirements` and `topics` gracefully
   - Provide fallback values for missing data

3. **Update progress calculations** to use the new ExamUserProgress properties:
   - Use `progress.answeredQuestions`, `progress.correctAnswers`, `progress.incorrectAnswers`
   - Calculate remaining questions as `exam.totalQuestions - progress.answeredQuestions`

4. **Fix enum usage** to use the new extensions:
   - `exam.examType.displayName` for display text
   - `exam.difficulty.color` for difficulty badge colors

This ensures the UI compiles and displays data correctly with the updated entity structure.

### mobile-app\lib\features\exams\presentation\bloc\exam_bloc.dart(MODIFY)

References: 

- mobile-app\lib\features\exams\domain\entities\exam.dart(MODIFY)
- mobile-app\lib\features\search\domain\usecases\search_exams_usecase.dart

Fix the ExamBloc to work with the updated entity structure and resolve search functionality conflicts:

1. **Update exam list operations** to use the new Exam entity structure:
   - Fix `_onToggleExamFavorite` to use the new `copyWith` method on Exam entity
   - Update `_onUpdateExamProgress` to properly update the `userProgress` field
   - Ensure all exam operations work with the comprehensive entity

2. **Fix search integration** by ensuring consistent entity usage:
   - Verify that SearchExamsUseCase returns the same Exam entity type
   - Ensure search filters align with the new entity structure
   - Remove any duplicate search logic if it exists

3. **Add missing passingScore handling** in exam completion logic:
   - Use `exam.passingScore` instead of hardcoded values
   - Handle cases where passingScore might be null

4. **Update error handling** to provide better user feedback:
   - Add specific error messages for different failure types
   - Ensure error states preserve the previous loaded state when possible

This ensures the bloc layer works correctly with the updated entity structure and integrates properly with the search functionality.

### mobile-app\lib\features\exams\data\repositories\exam_repository_impl.dart(MODIFY)

References: 

- mobile-app\lib\features\exams\data\models\exam_model.dart(MODIFY)
- mobile-app\lib\features\exams\domain\entities\exam.dart(MODIFY)

Update the exam repository implementation to work with the new entity structure:

1. **Fix entity conversion** in all repository methods:
   - Ensure `getExams()` properly converts ExamModel list to Exam entity list
   - Update `getExamDetail()` to handle the comprehensive entity structure
   - Fix `searchExams()` to return consistent Exam entities

2. **Add missing field handling** for new entity properties:
   - Handle `requirements` and `topics` fields (provide empty lists if not available from API)
   - Manage `userProgress` data integration if it comes from a separate endpoint
   - Set appropriate default values for missing optional fields

3. **Update error handling** to be more specific:
   - Provide better error messages for different API failure scenarios
   - Handle cases where partial data is available

4. **Ensure search method compatibility** with the search module:
   - Verify that the search method signature matches what SearchExamsUseCase expects
   - Ensure consistent filtering and pagination handling

This ensures the repository layer properly bridges between the data models and the updated domain entities.

### mobile-app\lib\features\exams\domain\repositories\exam_repository.dart(MODIFY)

References: 

- mobile-app\lib\features\search\domain\usecases\search_exams_usecase.dart
- mobile-app\lib\features\exams\domain\entities\exam.dart(MODIFY)

Update the exam repository interface to match the implementation and ensure consistency:

1. **Verify method signatures** align with the updated entity structure:
   - Ensure all methods return the updated Exam entity type
   - Check that search method parameters match what SearchExamsUseCase expects
   - Verify pagination and filtering parameter types

2. **Add missing method documentation** for clarity:
   - Document expected behavior for optional fields like `requirements`, `topics`
   - Clarify how `userProgress` data is handled
   - Document error scenarios and expected failure types

3. **Ensure search integration compatibility**:
   - Verify that the `searchExams` method signature matches what the search module expects
   - Ensure consistent return types and error handling

This ensures the repository interface is consistent with both the implementation and the search module requirements.