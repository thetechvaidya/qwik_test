---
alwaysApply: true
description: File organization and naming conventions
---

# File Organization & Naming Conventions

## Directory Structure
Follow the established Laravel and project-specific patterns:

### PHP Files
- **Controllers**: Organize by role/namespace
  - `app/Http/Controllers/Admin/` - Admin functionality
  - `app/Http/Controllers/User/` - User-facing features  
  - `app/Http/Controllers/Api/` - API endpoints
- **Models**: Root level in `app/Models/`
- **Requests**: Mirror controller structure in `app/Http/Requests/`
- **Transformers**: Organize by consumer type in `app/Transformers/`

### Frontend Files
- **Components**: Categorize by function in `resources/js/Components/`
  - `Cards/` - UI card components
  - `Forms/` - Form-related components
  - `Questions/` - Quiz/exam question components
  - `Buttons/` - Button variations
- **Pages**: Mirror backend controller organization
  - `Admin/` - Admin interface pages
  - `User/` - User interface pages
  - `Auth/` - Authentication pages
- **Layouts**: Shared layout components in `resources/js/Layouts/`

## Naming Conventions

### PHP Classes
- **Controllers**: `ExamController`, `CategoryController` (singular, descriptive)
- **Models**: `Exam`, `Category`, `User` (singular entity names)
- **Requests**: `ExamRequest`, `CategoryRequest` (match controller action)
- **Transformers**: `ExamCardTransformer`, `CategoryTransformer` (describe output)
- **Filters**: `ExamFilters`, `CategoryFilters` (plural, describe filtering)

### Vue Components
- Use PascalCase: `ExamCard.vue`, `QuestionForm.vue`
- Be descriptive: `ExamResultsCard.vue` vs `Card.vue`
- Group related components in subdirectories

### Database Files
- **Migrations**: Use descriptive names with timestamps
- **Seeders**: `CategorySeeder`, `UserSeeder` (descriptive of data)

## File Naming Patterns

### Consistency Rules
1. Use descriptive names that clearly indicate purpose
2. Follow Laravel conventions for directory placement
3. Mirror backend structure in frontend organization
4. Use consistent suffixes (Controller, Request, Transformer, etc.)
5. Group related functionality together

### Examples of Good Names
- `ExamScheduleController` - handles exam scheduling
- `QuizSessionTransformer` - transforms quiz session data
- `CategoryFilters` - filters for category queries
- `ExamResultsCard.vue` - displays exam results

### Avoid
- Generic names like `Controller`, `Component`, `Helper`
- Abbreviations that aren't clear: `ExCtrl`, `CatTrans`
- Inconsistent casing or conventions

## Asset Organization
- **CSS**: Store in `resources/css/` and `public/css/`
- **Images**: Use `public/images/` for static assets
- **JavaScript**: Compiled assets in `public/js/`
- **Vendor Assets**: Keep in `public/vendor/` directory

Follow these patterns to maintain consistency and make the codebase easier to navigate for all developers.