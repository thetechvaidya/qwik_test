---
globs: *.php
description: Database design and migration patterns
---

# Database and Migration Patterns

## Migration Conventions
Based on existing migrations in [database/migrations/](mdc:database/migrations/):

### Naming
- Use descriptive names: `create_exam_sessions_table`, `add_subscription_columns_to_users`
- Include action and table name clearly
- Use timestamps for ordering: `2024_01_15_120000_create_exams_table`

### Structure Guidelines
- Always include `id`, `created_at`, `updated_at` columns
- Use appropriate foreign key constraints
- Add indexes for frequently queried columns
- Use nullable columns appropriately

### Common Patterns
```php
// Foreign key relationships
$table->foreignId('user_id')->constrained()->cascadeOnDelete();
$table->foreignId('category_id')->constrained();

// Common column types
$table->string('title');
$table->text('description')->nullable();
$table->json('settings')->nullable();
$table->timestamp('expires_at')->nullable();
$table->boolean('is_active')->default(true);

// Indexes for performance
$table->index(['user_id', 'created_at']);
$table->index('status');
```

## Model Relationships
### Established Patterns
- Users have many ExamSessions, QuizSessions, PracticeSessions
- Categories have many Exams, Questions
- Exams belong to Categories and have many Questions
- Questions can have multiple QuestionOptions
- Use polymorphic relationships where appropriate

### Relationship Examples
```php
// In User model
public function examSessions() {
    return $this->hasMany(ExamSession::class);
}

// In Category model  
public function exams() {
    return $this->hasMany(Exam::class);
}

// In Exam model
public function category() {
    return $this->belongsTo(Category::class);
}

public function questions() {
    return $this->hasMany(Question::class);
}
```

## Database Design Principles
- Normalize data appropriately
- Use appropriate data types and constraints
- Consider performance implications of relationships
- Use soft deletes for important data: `$table->softDeletes();`
- Store user preferences and settings as JSON when flexible structure needed