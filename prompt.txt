I have created the following plan after thorough exploration and analysis of the codebase. Follow the below plan verbatim. Trust the files and references. Do not re-verify what's written in the plan. Explore only when absolutely necessary. First implement all the proposed file changes and then I'll review all the changes together at the end.

### Observations

The Flutter mobile app has a solid foundation but includes many complex features that may not exist in the web application. The user wants to simplify and focus only on core features that match their current web app functionality. The mobile app currently has advanced features like offline sync, complex question types, social authentication, and push notifications that should be removed or simplified to match the web app's scope.

### Approach

The simplified approach will focus on core web app features only:

1. **Core Authentication**: Basic email/password login, registration, logout (remove social auth, biometric auth)
2. **Basic Exam Flow**: List exams, view details, take exams with simple question types only (remove complex matching/ordering)
3. **Simple Dashboard**: Basic stats and recent activity (remove complex analytics)
4. **Basic Profile**: View and edit profile (remove advanced features)
5. **Essential Settings**: Basic app settings (remove complex offline sync UI)
6. **Remove Complex Features**: Remove or disable offline sync UI, social auth, push notifications, complex question types

This approach prioritizes getting a working mobile app that mirrors the web application's functionality without additional complexity.

### Reasoning

I explored the mobile app codebase and found it has many advanced features. After the user's clarification, I need to focus on simplifying to match only the web app's current functionality and remove complex mobile-specific features that would be difficult to implement or maintain.

## Mermaid Diagram

sequenceDiagram
    participant User
    participant Router
    participant AuthBloc
    participant ExamBloc
    participant API
    
    Note over User,API: Simplified Mobile App Flow
    
    User->>Router: App Launch
    Router->>AuthBloc: Check Auth Status
    AuthBloc->>API: Validate Token
    
    alt User Not Authenticated
        AuthBloc->>Router: Redirect to Login
        User->>AuthBloc: Email/Password Login
        AuthBloc->>API: Authenticate
        API-->>AuthBloc: Auth Token
    end
    
    AuthBloc->>Router: Navigate to Dashboard
    Router->>User: Show Simple Dashboard
    
    User->>ExamBloc: Browse Exams
    ExamBloc->>API: Fetch Exam List
    API-->>ExamBloc: Exam Data
    
    User->>ExamBloc: Select & Take Exam
    ExamBloc->>API: Start Exam Session
    API-->>ExamBloc: Questions (Simple Types Only)
    
    User->>ExamBloc: Submit Answers
    ExamBloc->>API: Submit Exam
    API-->>ExamBloc: Results
    
    Router->>User: Show Results

## Proposed File Changes

### mobile-app\lib\core\router\app_router.dart(MODIFY)

References: 

- mobile-app\lib\features\dashboard\presentation\pages\dashboard_page.dart(MODIFY)
- mobile-app\lib\features\profile\presentation\pages\profile_page.dart
- mobile-app\lib\features\exam_session\presentation\pages\exam_taking_page.dart
- mobile-app\lib\features\settings\presentation\pages\settings_page.dart(MODIFY)

Replace PlaceholderPage instances with actual pages for core features only: home route to use `DashboardPage`, profile route to use `ProfilePage`, exam-taking route to use `ExamTakingPage`, settings route to use `SettingsPage`. Remove placeholder routes for complex features like notifications, help, about pages. Keep only essential routes: home, exams, profile, settings. Remove the PlaceholderPage class definition.

### mobile-app\lib\features\authentication\presentation\pages\forgot_password_page.dart(NEW)

References: 

- mobile-app\lib\features\authentication\presentation\pages\login_page.dart

Create a simple ForgotPasswordPage with email input and basic validation. Keep it minimal - just email input, submit button, and basic success/error messaging. Use the existing auth patterns from login page.

### mobile-app\lib\features\profile\presentation\pages\edit_profile_page.dart(MODIFY)

References: 

- mobile-app\lib\features\profile\presentation\pages\profile_page.dart

Create a simple EditProfilePage with basic form fields for name, email, and phone. Keep it minimal without complex features like image upload or advanced validation. Use simple form validation and integrate with existing profile repository.

### mobile-app\lib\features\exam_session\presentation\widgets\answer_options_widget.dart(MODIFY)

Remove the complex question types (matching and ordering). Replace the TODO implementations with simple error messages or hide these question types entirely. Focus only on multiple choice, single choice, and true/false questions that likely exist in the web app.

### mobile-app\lib\features\exam_session\presentation\widgets\question_content_widget.dart(MODIFY)

Simplify the attachment handling. Either remove attachment support entirely or implement basic URL opening with `url_launcher` for simple links only. Remove complex file handling and viewers.

### mobile-app\lib\features\authentication\presentation\widgets\social_auth_buttons.dart(DELETE)

Remove social authentication entirely as it adds complexity and may not exist in the web app. Focus on basic email/password authentication only.

### mobile-app\lib\features\offline(DELETE)

Remove the entire offline feature directory as it's a complex mobile-specific feature that likely doesn't exist in the web app. This includes all offline sync, caching, and related functionality.

### mobile-app\lib\core\di\service_locator.dart(MODIFY)

Remove all offline-related service registrations, social auth services, and complex features. Keep only core services: authentication, exams, dashboard, profile, settings. Simplify the dependency injection to focus on essential features only.

### mobile-app\lib\shared\navigation\navigation_destinations.dart(MODIFY)

Simplify navigation destinations to include only core features: Home, Exams, Profile, Settings. Remove complex destinations like Practice, Progress, Notifications, Help, About. Keep the navigation simple and focused on essential functionality.

### mobile-app\lib\features\dashboard\presentation\pages\dashboard_page.dart(MODIFY)

Simplify the dashboard to show only basic information: user stats, recent exams taken, and quick navigation to exams. Remove complex analytics, achievements, and performance trends that may not exist in the web app. Keep it clean and simple.

### mobile-app\lib\features\settings\presentation\pages\settings_page.dart(MODIFY)

Simplify settings to include only basic options: theme selection, language (if supported in web app), and account settings. Remove offline mode, sync settings, analytics toggles, and other complex features. Keep only settings that exist in the web application.

### mobile-app\pubspec.yaml(MODIFY)

Remove dependencies for complex features: social authentication packages, offline storage beyond basic Hive, push notification packages, complex file handling packages. Keep only essential dependencies for core functionality: authentication, networking, basic storage, navigation, and UI components.

### mobile-app\lib\main.dart(MODIFY)

Simplify the main app initialization. Remove Firebase services that aren't essential (keep only basic analytics if needed), remove push notification initialization, and remove complex service initializations. Focus on basic app startup with authentication and core features only.

### mobile-app\README.md(MODIFY)

Update README with simplified project description focusing on core features only. Include basic setup instructions, API integration details, and simple build/run instructions. Remove references to complex features that have been removed.

### mobile-app\lib\core\constants\app_constants.dart(MODIFY)

Remove constants related to offline features, complex sync configurations, and advanced features. Keep only basic app constants like app name, version, basic timeouts, and simple configuration values.